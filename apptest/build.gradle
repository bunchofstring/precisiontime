apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'
    defaultConfig {
        multiDexEnabled true
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 8
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['debug','release']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    google()
    mavenCentral()
    jcenter()
}

ext.androidSupportVersion = '28.0.0'

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    androidTestImplementation project(path: ':testcore')
    androidTestImplementation project(path: ':capture')
    androidTestImplementation project(path: ':flaky')
    androidTestImplementation project(path: ':netcon')

    androidTestUtil 'androidx.test:orchestrator:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
    }
}

ext.getCaptureDeviceDir = { ->
    def defaultCaptureDeviceDir = "/sdcard/Pictures/Captures"
    def propertyName = "android.testInstrumentationRunnerArguments.captureDeviceDir"
    return project.properties[propertyName] ?: defaultCaptureDeviceDir
}

def transferCapturesTask = task('transferCaptures', type: Exec, group: 'reporting') {
    def sourceDirectory = getCaptureDeviceDir()
    def destinationDirectory = getReportsDir().toString()+"/androidTests/connected"
    doFirst {
        println "Transferring captures..."
        println "from device at " + sourceDirectory
        println "to PC at " + destinationDirectory
    }
    executable "${android.getAdbExecutable().toString()}"
    args 'pull', '-a', sourceDirectory, destinationDirectory
    ignoreExitValue true
}

def cleanUpCapturesTask = task('cleanUpCaptures', type: Exec, group: 'reporting') {
    def sourceDirectory = getCaptureDeviceDir()
    doFirst {
        println "Cleaning up captures from device at " + sourceDirectory
    }
    executable "${android.getAdbExecutable().toString()}"
    args 'shell', 'rm', '-r', sourceDirectory
    ignoreExitValue true
}

gradle.projectsEvaluated {
    connectedDebugAndroidTest.finalizedBy transferCapturesTask
    transferCapturesTask.finalizedBy cleanUpCapturesTask
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        //exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }
}
